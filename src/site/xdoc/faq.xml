<document>
	<properties>
		<author email="krasimir.zhelev@rrze.uni-erlangen.de">
			IDMone Team
		</author>
		<title>FAQ</title>
	</properties>
	<body>
		<section name="Where can I find 'lib-jpwgen'?">
			<p>
				Instructions for obtaining the maven artifact
				<em>jpwgen</em>
				are available at the
				<a href="./dependency-info.html">dependency info</a>
				and
				<a href="./distribution-management.html">reporitory</a>
				page.
			</p>
		</section>

		<section name="How can I start 'lib-jpwgen'?">
			<p>
				<strong>
					Embedded in an application
				</strong>
				To use the program as a library you should place it
				in the classpath
				of your application together with
				its <a href="./dependencies.html">dependencies</a>. Then from
				within your code you
				can do something like:
				<br />
				<code>
					<br />
					// Flags: "-N 50 -M 100 -y -s 16 -m -o -q"
					<br />
					PwGeneratorFlagBuilder flags = new PwGeneratorFlagBuilder();
					flags<br/>
						.setIncludeSymbols()<br/>
						.setOnly1Capital()<br/>
						.setOnly1Symbol()<br/>
						.setOnly1Digit()<br/>
					<br />
					IPasswordPolicy passwordPolicy = new PasswordPolicy(<br/>
							16, 16, 100, flags.build(), <br/>
							RandomFactory.getInstance().getSecureRandom());<br/>
					<br/>
					passwordPolicy.getBlacklist().add("badpassword");
					<br />
					IPwGenerator pw = new PwGenerator(passwordPolicy);<br/>
					List &lt;String&gt; passwords = pw.generate(50, 0, null);<br/>
					<br />
					int count = 0;
					<br />
					System.out.printf("\n");
					<br />
					for (Iterator iter = passwords.iterator();
					iter.hasNext();)
					<br />
					{
					<br />
					String element = (String) iter.next();
					<br />
					System.out.printf("%3d Password: * %s\n",
					++count, element);
					<br />
					}

				</code>
				<br />
			
				or
				<code>
					<br />
				PwGeneratorFlagBuilder flags = new PwGeneratorFlagBuilder();
				<br />
				flags.setIncludeNumerals().setIncludeCapitals()
				<br />
			.setIncludeReducedSymbols().setFilterAmbiguous();
			<br />
					List &lt;String&gt; passwords = PwGenerator.generate(passLength, numPasswords,
			100, flags.build(), null, null);
				    <br />
				  	<br />
					int count = 0;
					<br />
					System.out.printf("\n");
					<br />
					for (Iterator iter = passwords.iterator();
					iter.hasNext();)
					<br />
					{
					<br />
					String element = (String) iter.next();
					<br />
					System.out.printf("%3d Password: * %s\n",
					++count, element);
					<br />
					}  
				    
				    </code>
				    <br />
				    Using the flag builder should provide some performance boost. The last
				    argument the PwGenerator's call take is a progress monitor which should implement <i>IProgressListener</i>.
				    A progress listener can be also used for interrupting the generation process.
				<br />
					<br />
			</p>
		</section>

		<section name="What about SecureRandom?">
			If you want to get more information about the SecureRandom
			and which
			providers and algorithms are available at your
			system check out the
			project source code. The
			<em>RandomFactoryTest.java</em>
			can be pretty useful.
		</section>

	</body>
</document>
